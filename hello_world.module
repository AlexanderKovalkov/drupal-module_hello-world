<?php

/**
 * @file
 * Hello World module file.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\BubbleableMetadata;

/**
 * Implements hook_help().
 */
function hello_world_help($route_name, RouteMatchInterface $route_match)
{
    switch ($route_name) {
        case 'help.page.hello_world':
            $output = '';
            $output .= '<h3>' . t('About') . '</h3>';
            $output .= '<p>' . t('This is an example module.') . '</p>';
            return $output;

        default:
    }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
// function  hello_world_webform_submission_svyazatsya_s_nami_add_form__2_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
//     // Perform alterations.
//     $form['#submit'][] = 'лолд';
// }

// function hello_world_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
//   if ($form_id === 'webform_submission_svyazatsya_s_nami_node_1_add_form') {
//         $form['actions']['submit']['#value'] = 'h345345';
//   }
// }


/**
 * Implements hook_mail().
 */
function hello_world_mail($key, &$message, $params)
{
    switch ($key) {
        case 'hello_world_log':
            $message['from'] = \Drupal::config('system.site')->get('mail');
            $message['subject'] = t('There is an error on your website');
            $message['body'][] = $params['message'];
            $user_message = 'The user that was logged in: [current-user:name].';
            $message['body'][] = \Drupal::token()->replace($user_message, ['current-user' => \Drupal::currentUser()]);
            break;
    }
}

/**
 * Implements hook_token_info().
 */
function hello_world_token_info()
{
    $type = [
        'name' => t('Hello World'),
        'description' => t('Tokens related to the Hello World module.'),
    ];

    $tokens['salutation'] = [
        'name' => t('Salutation'),
        'description' => t('The Hello World salutation value.'),
    ];

    return [
        'types' => ['hello_world' => $type],
        'tokens' => ['hello_world' => $tokens],
    ];
}

/**
 * Implements hook_tokens().
 */
function hello_world_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata)
{
    $replacements = [];
    if ($type == 'hello_world') {
        foreach ($tokens as $name => $original) {
            switch ($name) {
                case 'salutation':
                    $replacements[$original] = \Drupal::service('hello_world.salutation')->getSalutation();
                    $config = \Drupal::config('hello_world.custom_salutation');
                    $bubbleable_metadata->addCacheableDependency($config);
                    break;
            }
        }
    }
    return $replacements;
}

/**
 * Выводим токен в файле шаблона как твиг ['hello_world_message']
 * Implements hook_preprocess_page().
 */
function hello_world_preprocess_page(&$variables)
{
    $message = \Drupal::token()->replace('[hello_world:salutation]');
    $variables['hello_world_message'] = $message;
}

/**
 * Implements hook_theme().
 */
function hello_world_theme($existing, $type, $theme, $path)
{
    return [
        'hello_world_salutation' => [
            'variables' => ['salutation' => NULL, 'target' => NULL, 'overridden' => FALSE],
        ],
    ];
}

/**
 * Default preprocessor function for the hello_world_salutation theme hook.
 */
function template_preprocess_hello_world_salutation(&$variables)
{
    $variables['attributes'] = [
        'class' => ['salutation'],
    ];
}

/**
 * Implements hook_theme_suggestions_HOOK().
 */
function hello_world_theme_suggestions_hello_world_salutation($variables)
{
    $suggestions = [];
    if ($variables['overridden'] === TRUE) {
        $suggestions[] = 'hello_world_salutation__overridden';
    }
    return $suggestions;
}
